Lab 3 - This is a demo.  Source code is available and commented

#include <libmemcached/memcached.h>
#include <stdio.h>

int main(int argc, char **argv) {
  //memcached_servers_parse (char *server_strings);
  memcached_server_st *servers = NULL;
  memcached_st *memc;
  memcached_return rc;
  char *key= "thisisakey";
  char *value= "This is a value";

  memc= memcached_create(NULL);
  servers= memcached_server_list_append(servers, "localhost", 11211, &rc);
  rc= memcached_server_push(memc, servers);

  if (rc == MEMCACHED_SUCCESS)
    fprintf(stderr,"Added server successfully\n");
  else
    fprintf(stderr,"Couldn't add server: %s\n",memcached_strerror(memc, rc));

//THIS SHOULD SUCCEED AS THE KEY ISN"T THERE YET
  rc= memcached_set(memc, key, strlen(key), value, strlen(value), (time_t)0, (uint32_t)0);

  if (rc == MEMCACHED_SUCCESS)
    fprintf(stderr,"Key stored successfully\n");
  else
    fprintf(stderr,"Couldn't store key: %s\n",memcached_strerror(memc, rc));

//THIS SHOULD FAIL AS ADD WILL ERROR IF THE KEY IS ALREADY THERE
  rc= memcached_add(memc, key, strlen(key), value, strlen(value), (time_t)0, (uint32_t)0);

  if (rc == MEMCACHED_SUCCESS)
    fprintf(stderr,"Key stored successfully\n");
  else
    fprintf(stderr,"Couldn't store key: %s\n",memcached_strerror(memc, rc));

//THIS SHOULD RETURN OUR VALUE
  char *result = memcached_get(memc, key, strlen(key), 0, NULL, &rc);

  if(rc == MEMCACHED_SUCCESS)
         fprintf(stderr, "RETRIEVED VALUE: %s\n", result);
  else
         fprintf(stderr,"Couldn't find key: %s\n",memcached_strerror(memc, rc));

  return 0;
}


